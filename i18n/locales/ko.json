{
  "work_description": "업무로는 주로 Javascript와 Python을 사용한 백엔드 개발을 하고 있으며, 개인적으로는 Chrome 확장 기능 등 다양한 프로젝트를 개발하고 있습니다.",
  "skill_stacks": "기술 스택",
  "name": "금교중",
  "view_details": "자세히 보기",
  "deployment": "배포",
  "detail": "상세",
  "projects": {
    "company_projects": {
      "title": "업무 프로젝트",
      "intro": "업무 프로젝트 코드는 공개할 수 없으나, 자세히 보기 버튼으로 코드 이외의 상세 정보를 확인 가능합니다.",
      "metaverse2": {
        "title": "가상 부동산 운영 및 거래 서비스.",
        "description": "NestJS 백엔드 및 PostgreSQL 데이터베이스 설계부터 개발, 서비스 출시, 운영까지 지속적으로 폭넓게 참여했습니다.",
        "note": "현재는 서비스가 종료되었지만, 어떤 서비스였는지는 당시의 백서를 통해 확인하실 수 있습니다.",
        "whitepaper": "Metaverse2 백서"
      },
      "list_it": {
        "title": "스포츠 컬렉션 거래 서비스.",
        "description": "Django 백엔드 및 MySQL 데이터베이스 개발. 대규모 리뉴얼을 담당하여 API 전반에 참여했습니다.",
        "note": "주소는 다음과 같습니다.",
        "address": "list-it.xyz"
      }
    },
    "personal_projects": {
      "title": "개인 프로젝트",
      "intro": "개인 프로젝트는 GitHub에서 자세한 코드와 Readme를 확인하실 수 있습니다.",
      "llm_chat": {
        "title": "ChatGPT, Grok, Ollama 등의 LLM API를 사용하여 캐릭터와 대화를 즐길 수 있는 음성 지원 챗봇입니다.",
        "description": "프론트엔드는 Python의 Streamlit을 사용하고, DB는 SQLite를 사용했습니다."
      },
      "novel_ai_helper": {
        "title": "NovelAI라는 AI 이미지 생성 서비스 사용을 보조하는 Chrome 확장 프로그램.",
        "description": "csv나 txt에서 리스트를 읽고 태그를 자동 완성하는 UI를 제공하며, 추가한 txt를 폴더로 관리하거나 HTML 상에서 편집할 수 있는 간단한 에디터 탑재.",
        "note": "2025년 현재, Chrome 웹 스토어에서 공개 중입니다."
      },
      "journal_migrator": {
        "title": "iPhone의 Apple Journal 앱에서 Diarium으로 데이터를 마이그레이션하는 도구.",
        "description": "Apple Journal에서 내보낸 데이터를 분석하고, Diarium 앱에서 가져올 수 있는 형식으로 변환합니다.",
        "note": "iPhone에서 Android로 기변할 때 Apple Journal 데이터를 Diarium으로 이전하기 위해 Python으로 개발했습니다."
      },
      "watermark_remover": {
        "title": "동영상 워터마크 제거 스크립트.",
        "description": "동영상의 워터마크를 제거하기 위해 FFmpeg로 동영상을 분할하고, lama cleaner로 워터마크를 제거한 후, 다시 FFmpeg로 결합합니다. 자동화를 위해 Python과 Powershell/Batch 스크립트를 사용했습니다.",
        "note": "현재까지 제 GitHub에서 가장 많은 Star와 Fork를 받은 프로젝트입니다."
      },
      "floating_button": {
        "title": "스마트폰에서 자주 볼 수 있는, 화면 위에 떠 있는 반투명 버튼을 Windows에서 사용할 수 있는 도구.",
        "description": "버튼에 할당할 앱이나 색상, 투명도, 크기 등을 설정할 수 있으며, 화면 상에 여러 개의 버튼을 동시에 배치할 수 있습니다.",
        "note": "Autohotkey 2.0으로 개발하여 exe로 배포 중입니다."
      },
      "booru_downloader": {
        "title": "booru 계열 이미지 배포 사이트에서 이미지 크롤링하는 GUI 도구.",
        "description": "CUI 크롤링 라이브러리인 waifuc를 GUI로 사용할 수 있도록 래핑했습니다.",
        "note": "PyQt로 GUI를 개발하였으며 booru에서 사용되는 태그의 자동 완성 기능을 내장했습니다."
      },
      "call_summary": {
        "title": "통화 녹음을 텍스트로 변환하고 AI로 요약합니다.",
        "description": "현재 AI 통화 요약은 대부분 제조사 의존적인데, 제조사 서비스에 의존하지 않고 자체적으로 AI 통화 요약을 사용하기 위해 개발했습니다.",
        "note": "WhisperX로 음성을 텍스트로 변환하고, OpenAI API로 요약합니다. Android의 Tasker와 연동하면 완전 자동으로 AI 통화 요약이 가능합니다.",
        "tech": "Node.js와 Express로 개발하여, REST API로 사용 가능합니다."
      },
      "portfolio": {
        "title": "이 포트폴리오 자체입니다.",
        "description": "NuxtJS를 사용하여 웹 페이지로 열람 가능하도록 만들어봤습니다.",
        "note": "상세 코드는 Github에서 확인하실 수 있습니다."
      }
    }
  },
  "contact": {
    "title": "연락처",
    "email": "Email",
    "github": "GitHub"
  },
  "project-a": {
    "title": "가상 부동산 거래 플랫폼 'Metaverse2' 개발",
    "intro": "가상 부동산 운영 및 판매 서비스 'Metaverse2'의 백엔드 시스템과 데이터베이스를 초기 설계부터 개발, 출시, 운영까지 일관되게 담당했습니다. PostgreSQL과 PostGIS를 활용한 지리 공간 데이터 관리 시스템을 구축하여 사용자가 실제 지구 지도 위에서 가상 토지를 거래할 수 있는 플랫폼을 구현했습니다.",
    "overview": {
      "title": "프로젝트 개요",
      "content": "'Metaverse2'는 실제 지도 데이터를 기반으로 한 가상 공간으로, 사용자가 10m×10m 구역 단위로 토지를 구매, 운영, 거래할 수 있는 플랫폼입니다. Express/NestJS를 백엔드로, PostgreSQL/PostGIS를 이용한 지리 공간 데이터 관리를 활용하여 가상 토지의 소유권 관리부터 자원 채굴, 커뮤니티 운영까지 포괄적인 시스템을 개발했습니다. Metaverse2는 블록체인 관련 기능도 제공했지만, 저는 주로 블록체인 이외의 백엔드 API와 지형 데이터 관리 시스템의 설계 및 구현을 담당했습니다."
    },
    "tech_stack": {
      "title": "기술 스택",
      "backend": "백엔드",
      "database": "데이터베이스",
      "geo_data": "지리 공간 데이터",
      "deployment": "배포",
      "api_design": "API 설계",
      "version_control": "버전 관리"
    },
    "features": {
      "title": "주요 구현 기능",
      "auth_system": {
        "title": "사용자 인증 및 관리 시스템",
        "description": "JWT를 활용한 견고한 인증 시스템을 구축하고, 사용자 등록, 프로필 관리, 권한 제어 등의 기능을 구현했습니다. 2단계 인증에도 대응하여 보안 강화와 사용자 보호를 실현했습니다."
      },
      "virtual_land": {
        "title": "가상 부동산 시스템",
        "description": "PostgreSQL의 PostGIS 확장 기능을 활용하여 지리 공간 데이터를 효율적으로 관리하고, Mapbox의 실제 지구 지도를 기반으로 10m×10m 단위로 구획된 가상 토지 시스템을 구축했습니다. 위치 정보에 기반한 검색과 영역 선택 등의 복잡한 지리적 쿼리를 최적화하여 원활한 토지 관리 경험을 구현했습니다."
      },
      "payment": {
        "title": "입금 시스템",
        "description": "PayPal 및 은행 시스템과 연계하여 사용자의 입금을 자동으로 감지하고 잔액에 반영하는 시스템을 개발했습니다. 특히 PostgreSQL의 listen/notify 트리거 기능을 활용함으로써 실시간 처리와 높은 신뢰성을 양립시킨 결제 시스템을 구현했습니다."
      },
      "mining": {
        "title": "자원 및 토큰 채굴 시스템",
        "description": "cronjob을 이용하여 사용자가 소유한 토지 유형에 따라 자원이나 토큰을 자동으로 생성하고 부여하는 시스템을 구축했습니다."
      },
      "trading": {
        "title": "토지 거래 시스템",
        "description": "사용자 간에 가상 토지를 안전하고 효율적으로 매매할 수 있는 거래 시스템을 개발했습니다."
      },
      "community": {
        "title": "도시 커뮤니티 시스템",
        "description": "각 도시 지역에 가상 토지를 소유한 사용자들끼리 소통할 수 있는 커뮤니티 기능과 시장 선출을 통한 자치 시스템을 개발했습니다. 선거 기능과 정책 제안 및 투표 기능을 구현하여 토지 가치나 세율 등의 정책을 민주적으로 결정할 수 있는 구조를 구축했습니다."
      }
    },
    "challenges": {
      "title": "기술적 과제와 해결책",
      "geo_data_management": {
        "title": "지리 공간 데이터의 효율적 관리",
        "description": "방대한 양의 지리 공간 데이터를 효율적으로 처리하기 위해 PostGIS의 인덱스 최적화와 공간 쿼리 튜닝을 진행했습니다. 특히 광범위한 지도 표시와 상세한 구획 정보의 양립이 과제였으나, 확대 수준에 따른 데이터 가져오기의 계층화를 통해 해결했습니다."
      },
      "resource_system": {
        "title": "확장 가능한 자원 생성 시스템",
        "description": "수십만 구획의 토지에서 정기적으로 자원을 생성하는 처리는 큰 부하가 되었습니다. 이 과제에 대해 배치 처리의 분산화로 시스템 부하를 분산시키면서 모든 토지에 대해 공정한 자원 생성을 실현했습니다."
      },
      "transactions": {
        "title": "실시간 트랜잭션 처리",
        "description": "토지 거래나 자원 이동 등의 트랜잭션을 실시간으로 처리해야 했습니다. PostgreSQL의 트랜잭션 기능과 이벤트 기반 아키텍처를 결합하여 데이터 일관성을 유지하면서 빠른 처리를 실현했습니다."
      }
    },
    "results": {
      "title": "프로젝트 성과",
      "content1": "서비스 출시 후 6개월 만에 등록 사용자 수 7만 명을 달성했습니다. 특히 지리 공간 데이터의 효율적인 관리와 처리로 100만 구역 이상의 토지 정보를 실시간으로 표시하고 조작할 수 있는 시스템을 구현하여 사용자 경험 향상에 크게 기여했습니다.",
      "content2": "이 프로젝트를 통해 당시 신입 개발자였던 저는 대규모 지리 공간 데이터베이스의 설계 및 구현부터 복잡한 비즈니스 로직의 구현, 그리고 운영 환경에서의 운용까지 일련의 백엔드 개발 라이프사이클을 경험할 수 있었습니다."
    },
    "back_button": "포트폴리오로 돌아가기"
  },
  "project-b": {
    "title": "list-it.xyz 대규모 리뉴얼 작업의 상세 내용",
    "intro": "스포츠 컬렉션 거래 플랫폼 'List-it'의 백엔드 시스템을 전면적으로 리뉴얼했습니다. RESTful API 아키텍처를 기반으로 사용자 인증부터 상품 관리, 결제 시스템에 이르기까지 포괄적인 기능을 구현하고, 확장성과 유지보수성이 높은 시스템을 구축했습니다.",
    "overview": {
      "title": "프로젝트 개요",
      "content": "Django 프레임워크와 클래스 기반 뷰를 활용하여 스포츠 카드와 컬렉션 아이템의 거래 플랫폼을 지원하는 백엔드 시스템을 개발했습니다. 경매 형식과 직접 판매의 두 가지 판매 방식을 지원하고, 다양한 상품 카테고리와 태그, 검색 필터를 구현했습니다. 특히 상태 관리 시스템(상품 상태, 결제 상태, 정산 상태 등)의 설계에 중점을 두어 사용자 경험 향상에 기여했습니다."
    },
    "tech_stack": {
      "title": "기술 스택",
      "backend": "백엔드",
      "database": "데이터베이스",
      "deployment": "배포",
      "api_design": "API 설계",
      "version_control": "버전 관리",
      "dev_environment": "개발 환경"
    },
    "features": {
      "title": "주요 구현 기능",
      "auth_system": {
        "title": "사용자 인증 및 관리 시스템",
        "description": "이메일 인증을 포함한 사용자 등록 프로세스를 구현하고, JWT를 사용한 안전한 접근 제어 시스템을 구축했습니다. 또한, Google과 Apple, 카카오, 네이버 등 OAuth 인증도 구현하여 사용자 편의성을 향상시켰습니다."
      },
      "product_system": {
        "title": "상품 관리 시스템",
        "description": "복잡한 상품 데이터 모델을 설계하고, 카테고리, 태그, 옵션 값 등의 다양한 속성을 관리할 수 있는 시스템을 구축했습니다. 특히 스포츠 컬렉션 아이템에 특화된 속성(팀, 리그, 연대, 그레이딩 등)을 유연하게 관리할 수 있는 구조를 실현했습니다."
      },
      "sales_system": {
        "title": "판매 시스템",
        "description": "경매 형식과 고정 가격 판매의 두 가지 판매 방식을 지원하는 API 설계를 진행하고, 각각의 판매 방식에 적합한 상태 관리를 구현했습니다. 특히 입찰, 결제, 배송, 검수 등 복잡한 상태 전이를 효율적으로 관리하는 구조를 구축했습니다."
      },
      "coupon_system": {
        "title": "쿠폰 시스템",
        "description": "유연한 쿠폰 관리 시스템을 구현하여 할인율, 최소 구매액, 최대 할인액, 사용 가능 카테고리 등 다양한 조건을 설정할 수 있도록 했습니다. 또한, 사용자별 쿠폰 발행 및 사용 이력 관리 기능도 구현했습니다."
      },
      "seller_system": {
        "title": "판매자 관리 시스템",
        "description": "판매자 신청 프로세스의 설계와 구현을 진행하고, 계좌 정보나 사업자 정보의 관리, 판매 실적 집계 기능을 개발했습니다. 또한, 판매자 전용 대시보드용 API도 구축하여 매출 관리나 상품 상태 확인이 용이하도록 했습니다."
      },
      "background_tasks": {
        "title": "백그라운드 태스크 관리",
        "description": "Django Background Tasks를 활용하여 경매나 배송 등의 기한이 있는 태스크의 관리를 자동적이고 안정적으로 수행할 수 있도록 했습니다."
      }
    },
    "challenges": {
      "title": "기술적 과제와 해결책",
      "state_management": {
        "title": "복잡한 상태 관리",
        "description": "다양한 상품 상태(출품 중, 결제 대기, 배송 중 등)와 정산 상태(미처리, 처리 중, 완료 등)의 관리가 복잡했지만, 명확한 상태 코드와 상태 전이 로직을 설계함으로써 해결했습니다. 또한, 상태별 상품 목록 조회 API를 구현하여 프론트엔드에서의 표시를 용이하게 했습니다."
      },
      "performance": {
        "title": "성능 최적화",
        "description": "대량의 상품 데이터와 복잡한 관련 모델로 인한 쿼리 성능 문제에 대해 적절한 인덱스 설계와 쿼리 최적화를 진행했습니다. 또한, 페이지네이션과 필터링의 효율화를 통해 API 응답 속도를 개선했습니다."
      },
      "search_filter": {
        "title": "유연한 검색 및 필터링",
        "description": "다양한 조건(가격 범위, 카테고리, 팀, 리그 등)에 따른 상품 검색과 필터링을 가능하게 하는 API를 설계했습니다. 쿼리 파라미터를 활용한 유연한 필터링 시스템으로 사용자의 검색 용이성을 향상시켰습니다."
      }
    },
    "results": {
      "title": "프로젝트 성과",
      "content1": "이 API 개선을 통해 시스템의 확장성과 유지보수성이 크게 향상되었습니다. 또한, RESTful 설계 원칙에 기반한 일관성 있는 API 구조로 프론트엔드 개발 팀과의 협업이 원활해져 개발 효율성이 향상되었습니다.",
      "content2": "Django REST Framework의 장점을 최대한 활용하고, 모델 주도 개발과 클래스 기반 뷰의 채택으로 코드 재사용성을 높이고 개발 속도와 품질 향상에 기여했습니다."
    },
    "footer": {
      "back_button": "포트폴리오로 돌아가기",
      "visit_site": "list-it 사이트 보기"
    }
  }
}