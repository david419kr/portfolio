{
  "work_description": "業務としては主にJavascriptとPythonを用いたBackend開発を行っており、個人としてはChrome拡張機能など色々と開発しています。",
  "skill_stacks": "技術スタック",
  "name": "グム・ギョジュン",
  "view_details": "詳細を見る",
  "deployment": "配布",
  "detail": "詳細",
  "projects": {
    "company_projects": {
      "title": "業務プロジェクト",
      "intro": "業務プロジェクトのコードは公開できませんが、「詳細を見る」から公開し得る限りの詳細を御覧いだだけます。",
      "metaverse2": {
        "title": "仮想土地運営・売買サービス。",
        "description": "NestJSのBackend及びPostgreSQLのDatabase設計から開発、サービス立ち上げ、運営まで持続的に幅広く携わる。",
        "note": "現在はサービス終了していますが、どういったサービスだったかは当時の白書を御覧いただけます。",
        "whitepaper": "Metaverse2 Whitepaper"
      },
      "list_it": {
        "title": "スポーツコレクション売買サービス。",
        "description": "DjangoのBackend及びMySQLのDatabaseでの開発。大型リニューアルを担当し、API全般に携わる。",
        "note": "現在も運営中であり、アドレスはこちらになります。",
        "address": "list-it.xyz"
      }
    },
    "personal_projects": {
      "title": "個人プロジェクト",
      "intro": "個人プロジェクトは、GitHubから詳細なコードやReadmeを御覧いだだけます。",
      "llm_chat": {
        "title": "ChatGPTやGrok、OllamaなどのLLM APIを使い、キャラクターとの会話を楽しめる音声付きのチャットボット。",
        "description": "フロントエンドはPythonのStreamlitを使用し、DBはSQLiteを使用。"
      },
      "novel_ai_helper": {
        "title": "NovelAIというAI画像生成サービスの利用を補助するChrome拡張機能。",
        "description": "csvやtxtからリストを読み取り、タグを自動補完機能するUIを提供。追加したtxtをフォルダーで管理したり、HTML上で編集できる簡易エディター内蔵。",
        "note": "2025年現在、Chromeウェブストアで公開中です。"
      },
      "journal_migrator": {
        "title": "iPhoneのApple公式ジャーナルアプリから、Diariumへとデータをマイグレーションするツール。",
        "description": "Apple Journalでエクスポートしたデータを分析し、Diariumアプリでインポートできる形式に変換。",
        "note": "iPhoneからAndroidへと移行する際に、Apple JournalのデータをDiariumに移行するため、Pythonで開発。"
      },
      "watermark_remover": {
        "title": "動画の透かしを消すスクリプト。",
        "description": "動画の透かしを消すために、FFmpegで動画を分割し、lama cleanerで透かしを消した後、再度FFmpegで結合。全自動化のため、PythonとPowershell/Batchスクリプトを使用。",
        "note": "他のプロジェクトに比べ、若干片手間で開発したため少し不本意ですが、今のところ、自分のGithubで一番StarとForkをもらっているプロジェクトです。"
      },
      "floating_button": {
        "title": "スマートフォンでよく見られる、画面上に浮いている半透明ボタンをWindowsで使えるツール。",
        "description": "ボタンに割り当てるアプリや色、透明度、大きさなどを設定でき、画面上に複数個同時にボタンを並べられます。",
        "note": "Autohotkey 2.0で開発し、exeで配布中。"
      },
      "booru_downloader": {
        "title": "boooru系の画像配布サイトでイメージクローリングするGUIツール。",
        "description": "CUIのクローリングライブラリーであるwaifucを、GUIで使えるようにラッピング。",
        "note": "PythonのPyQtでGUIを開発し、booruで用いられるタグの自動補完機能を内蔵。"
      },
      "call_summary": {
        "title": "通話録音を文字に起こし、AIで要約。",
        "description": "現状、AI通話要約は大抵製造元依存的で、依存せず自前でAI通話要約を使えるように開発。",
        "note": "WhisperXで音声を文字に起こし、OpenAI APIで要約。AndroidのTaskerと連携すると、全自動でAI通話要約が可能。",
        "tech": "Node.jsとExpressで開発し、REST APIで使用可能。"
      },
      "portfolio": {
        "title": "当ポートフォリオそのもの。",
        "description": "フロントエンド専門ではありませんし、ポートフォリオ自体初作成とあって拙い出来ですが、NuxtJSを使い、Webページとしてご覧いただけるように作ってみました。",
        "note": "コードはGitHubに公開していますので、そちらから御覧いただけます。"
      }
    }
  },
  "contact": {
    "title": "連絡先",
    "email": "Email",
    "github": "GitHub"
  },
  "project-a": {
    "title": "バーチャルランド取引プラットフォーム「Metaverse2」の開発",
    "intro": "仮想土地の運営・売買サービス「Metaverse2」のバックエンドシステムとデータベースを、初期設計から開発、ローンチ、運用まで一貫して担当しました。PostgreSQLとPostGISを活用した地理空間データ管理システムを構築し、ユーザーが実際の地球の地図上で仮想土地を取引できるプラットフォームを実現しました。",
    
    "overview": {
      "title": "プロジェクト概要",
      "content": "「Metaverse2」は、実際の地図データに基づいた仮想空間で、ユーザーが10m×10mの区画単位で土地を購入・運営・取引できるプラットフォームです。Express/NestJSをバックエンドに、PostgreSQL/PostGISによる地理空間データ管理を駆使し、仮想土地の所有権管理から資源採掘、コミュニティ運営まで包括的なシステムを開発しました。Metaverse2はブロックチェーン関連機能も提供していましたが、私は主にブロックチェーン以外の、バックエンドAPIと地形データ管理システムの設計・実装を担当しました。"
    },
    
    "tech_stack": {
      "title": "技術スタック",
      "backend": "バックエンド",
      "database": "データベース",
      "geo_data": "地理空間データ",
      "deployment": "デプロイメント",
      "api_design": "API設計",
      "version_control": "バージョン管理"
    },
    
    "features": {
      "title": "主要実装機能",
      "auth_system": {
        "title": "ユーザー認証・管理システム",
        "description": "JWTを活用した堅牢な認証システムを構築し、ユーザー登録、プロフィール管理、権限制御などの機能を実装しました。二段階認証にも対応し、セキュリティ強化とユーザー保護を実現しました。"
      },
      "virtual_land": {
        "title": "バーチャルランドシステム",
        "description": "PostgreSQLのPostGIS拡張機能を活用して地理空間データを効率的に管理し、Mapboxの実際の地球地図をベースに10m×10m単位で区画分けされた仮想土地システムを構築しました。位置情報に基づく検索や領域選択などの複雑な地理的クエリを最適化し、スムーズな土地管理体験を実現しました。"
      },
      "payment": {
        "title": "入金システム",
        "description": "PayPalおよび銀行システムと連携し、ユーザーの入金を自動検出して残高に反映するシステムを開発しました。特にPostgreSQLのlisten/notifyトリガー機能を活用することで、リアルタイム処理と高い信頼性を両立させた決済システムを実現しました。"
      },
      "mining": {
        "title": "資源・トークン採掘システム",
        "description": "cronjobを利用して、ユーザーが所有する土地の種類に応じて資源やトークンを自動的に生成・付与するシステムを構築しました。土地タイプごとに異なる採掘率や希少資源の出現確率を設定し、経済バランスを考慮した設計を行いました。"
      },
      "trading": {
        "title": "土地取引システム",
        "description": "ユーザー間で仮想土地を安全かつ効率的に売買できる取引システムを開発しました。エスクローの仕組みを実装し、取引の信頼性を確保するとともに、価格履歴の追跡や市場分析機能も提供しました。"
      },
      "community": {
        "title": "都市コミュニティシステム",
        "description": "各都市エリアに仮想土地を持つユーザー同士がコミュニケーションを取れるコミュニティ機能と、市長選出による自治システムを開発しました。選挙機能や政策提案・投票機能を実装し、土地の価値や税率などの政策を民主的に決定できる仕組みを構築しました。"
      }
    },
    
    "challenges": {
      "title": "技術的課題と解決策",
      "geo_data_management": {
        "title": "地理空間データの効率的管理",
        "description": "膨大な量の地理空間データを効率的に処理するため、PostGISのインデックス最適化と空間クエリのチューニングを行いました。特に広範囲の地図表示と詳細な区画情報の両立が課題でしたが、ズームレベルに応じたデータ取得の階層化により解決しました。"
      },
      "resource_system": {
        "title": "スケーラブルな資源生成システム",
        "description": "数十万区画の土地から定期的に資源を生成する処理は大きな負荷となりました。この課題に対し、バッチ処理の分散化とキューイングシステムの導入により、システム負荷を分散させつつ、すべての土地に対して公平な資源生成を実現しました。"
      },
      "transactions": {
        "title": "リアルタイムトランザクション処理",
        "description": "土地取引や資源移動などのトランザクションをリアルタイムで処理する必要がありました。PostgreSQLのトランザクション機能とイベント駆動アーキテクチャを組み合わせ、データの整合性を保ちながら高速な処理を実現しました。"
      }
    },
    
    "results": {
      "title": "プロジェクト成果",
      "content1": "サービスローンチから6ヶ月で登録ユーザー数7万人を達成し、仮想土地の総取引額は5億円を超えました。特に地理空間データの効率的な管理と処理により、100万区画以上の土地情報をリアルタイムで表示・操作できるシステムを実現し、ユーザー体験の向上に大きく貢献しました。",
      "content2": "このプロジェクトを通じて、当時新人開発者だった私は、大規模な地理空間データベースの設計・実装から、複雑なビジネスロジックの実装、そして本番環境での運用まで、一連のバックエンド開発ライフサイクルを経験することができました。"
    },
    
    "back_button": "ポートフォリオに戻る",
    
    "meta": {
      "title": "Metaverse2 開発プロジェクト | ポートフォリオ",
      "description": "仮想土地取引プラットフォーム「Metaverse2」のバックエンドおよびデータベース開発プロジェクトの詳細"
    }
  },
   "project-b": {
    "title": "list-it.xyz 大型リニューアル作業の詳細",
    "intro": "スポーツコレクション取引プラットフォーム「List-it」のバックエンドシステムを全面的にリニューアルしました。RESTful API アーキテクチャに基づき、ユーザー認証から商品管理、決済システムに至るまで包括的な機能を実装し、スケーラブルで保守性の高いシステムを構築しました。",
    
    "overview": {
      "title": "プロジェクト概要",
      "content": "Djangoフレームワークとクラスベースビューを活用し、スポーツカードやコレクションアイテムの売買プラットフォームを支える複雑なバックエンドシステムを開発しました。オークション形式と直接販売の二つの販売方式をサポートし、多様な商品カテゴリやタグ、検索フィルターを実装しました。特に状態管理システム（商品状態、支払い状態、計算状態など）の設計に力を入れ、ユーザー体験の向上に貢献しました。"
    },
    
    "tech_stack": {
      "title": "技術スタック",
      "backend": "バックエンド",
      "database": "データベース",
      "deployment": "デプロイ",
      "api_design": "API設計",
      "version_control": "バージョン管理",
      "dev_environment": "開発環境"
    },
    
    "features": {
      "title": "主要実装機能",
      "auth_system": {
        "title": "ユーザー認証・管理システム",
        "description": "電子メール認証を含む堅牢なユーザー登録プロセスを実装し、JWTを使用したセキュアなアクセス制御システムを構築しました。アクセストークンとリフレッシュトークンの二重トークン認証方式により、セキュリティと利便性を両立させています。その他、GoogleやAppleの認証も実装し、ユーザーの利便性を向上させました。"
      },
      "product_system": {
        "title": "商品管理システム",
        "description": "複雑な商品データモデルを設計し、カテゴリ、タグ、オプション値などの多様な属性を管理できるシステムを構築しました。特にスポーツコレクションアイテムに特化した属性（チーム、リーグ、年代、グレーディングなど）を柔軟に管理できる構造を実現しました。"
      },
      "sales_system": {
        "title": "販売システム",
        "description": "オークション形式と固定価格販売の二つの販売方式をサポートするAPI設計を行い、それぞれの販売方式に適した状態管理を実装しました。特に入札、支払い、配送、検品など複雑なステータス遷移を効率的に管理する仕組みを構築しました。"
      },
      "coupon_system": {
        "title": "クーポンシステム",
        "description": "柔軟なクーポン管理システムを実装し、割引率、最低購入額、最大割引額、利用可能カテゴリなど様々な条件を設定できるようにしました。また、ユーザーごとのクーポン発行・使用履歴管理機能も実装しました。"
      },
      "seller_system": {
        "title": "販売者管理システム",
        "description": "販売者申請プロセスの設計と実装を行い、口座情報や事業者情報の管理、販売実績の集計機能を開発しました。また、販売者専用のダッシュボード用APIも構築し、売上管理や商品状態の確認が容易にできるようにしました。"
      },
      "background_tasks": {
        "title": "バックグラウンドタスク管理",
        "description": "Django Background Tasksを用い、オークションや配達などの期限付きのタスクの管理を自動かつ安定的にで行えるようにしました。"
      }
    },
    
    "challenges": {
      "title": "技術的課題と解決策",
      "state_management": {
        "title": "複雑な状態管理",
        "description": "多様な商品状態（出品中、支払い待ち、配送中など）と計算状態（未処理、処理中、完了など）の管理が複雑でしたが、明確なステータスコードと状態遷移ロジックを設計することで解決しました。また、状態別の商品リスト取得APIを実装し、フロントエンドでの表示を容易にしました。"
      },
      "performance": {
        "title": "パフォーマンス最適化",
        "description": "大量の商品データと複雑な関連モデルによるクエリパフォーマンスの問題に対して、適切なインデックス設計とクエリ最適化を行いました。また、ページネーションやフィルタリングの効率化により、APIレスポンス速度を大幅に改善しました。"
      },
      "search_filter": {
        "title": "柔軟な検索・フィルタリング",
        "description": "多様な条件（価格範囲、カテゴリ、チーム、リーグなど）による商品検索と絞り込みを可能にするAPIを設計しました。クエリパラメータを活用した柔軟なフィルタリングシステムにより、ユーザーの探しやすさを向上させました。"
      }
    },
    
    "results": {
      "title": "プロジェクト成果",
      "content1": "このAPI改修により、システムの拡張性と保守性が大幅に向上し、新機能の追加が容易になりました。また、RESTful設計原則に基づいた一貫性のあるAPI構造により、フロントエンド開発チームとの連携がスムーズになり、開発効率が向上しました。",
      "content2": "Django REST Frameworkの利点を最大限に活用し、モデル駆動開発とクラスベースビューの採用により、コード再利用性を高め、開発速度と品質の向上に貢献しました。"
    },
    
    "footer": {
      "back_button": "ポートフォリオに戻る",
      "visit_site": "list-it サイトを見る"
    },
    
    "meta": {
      "title": "List-it 大型リニューアル | ポートフォリオ",
      "description": "スポーツコレクション取引プラットフォーム「List-it」のバックエンドシステム全面リニューアルプロジェクトの詳細"
    }
  }
}